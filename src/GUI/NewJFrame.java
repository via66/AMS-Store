/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

import code.Transactions;

/**
 *
 * @author Evan Ng, Emily Bird, Jennifer Lui, Velina Ivanova
 */
public class NewJFrame extends javax.swing.JFrame {
	private Connection con;
	private Transactions trans;
	
	boolean newPurchase = true;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame(Connection con) {
    	this.con = con;
    	trans = new Transactions(con, this);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupClerk = new javax.swing.ButtonGroup();
        buttonGroupCustomer = new javax.swing.ButtonGroup();
        buttonGroupManager = new javax.swing.ButtonGroup();
        bigPane = new javax.swing.JTabbedPane();
        clerk = new javax.swing.JPanel();
        processPurchase = new javax.swing.JRadioButton();
        processReturn = new javax.swing.JRadioButton();
        Purchase = new javax.swing.JPanel();
        itemInput = new javax.swing.JPanel();
        addToCart = new javax.swing.JButton();
       // deletePrevious = new javax.swing.JButton();
        enterItemUPC = new javax.swing.JTextField();
        enterItemQuan = new javax.swing.JTextField();
        itemUPC = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cancelOrder1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        paymentType = new javax.swing.JLabel();
        cashOrCard = new javax.swing.JComboBox();
        fieldForCC = new javax.swing.JTextField();
        ccNumber = new javax.swing.JLabel();
        expiryDate = new javax.swing.JLabel();
        fieldforExpiryDate = new javax.swing.JTextField();
        cancelOrder = new javax.swing.JButton();
        completePurchase = new javax.swing.JButton();
        totalLabel = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        Return = new javax.swing.JPanel();
        enterReceiptID = new javax.swing.JLabel();
        fieldForReceiptID = new javax.swing.JTextField();
        issueRefund = new javax.swing.JButton();
        checkReceipt = new javax.swing.JButton();
        isValid = new javax.swing.JTextField();
        returnItemUPC = new javax.swing.JLabel();
        returnIUPCField = new javax.swing.JTextField();
        returnQuantity = new javax.swing.JLabel();
        returnQuanField = new javax.swing.JTextField();
        isSuccessRet = new javax.swing.JTextField();
        customer = new javax.swing.JPanel();
        registration = new javax.swing.JRadioButton();
        purchaseOnline = new javax.swing.JRadioButton();
        registrationPanel = new javax.swing.JPanel();
        name = new javax.swing.JLabel();
        address = new javax.swing.JLabel();
        id = new javax.swing.JLabel();
        phone = new javax.swing.JLabel();
        password = new javax.swing.JLabel();
        createButton = new javax.swing.JButton();
        cusPassword = new javax.swing.JTextField();     
        cusID = new javax.swing.JTextField();        
        cusName = new javax.swing.JTextField();       
        cusAddress = new javax.swing.JTextField();        
        cusPhone = new javax.swing.JTextField();   
        createButton.setEnabled(false);
        cusID.setEditable(false);
        cusName.setEditable(false);
        cusAddress.setEditable(false);
        cusPhone.setEditable(false);
        cusPassword.setEditable(false);
        jPanel1 = new javax.swing.JPanel();
        category = new javax.swing.JLabel();
        leadSinger = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        quantity = new javax.swing.JLabel();
        search = new javax.swing.JButton();
        search.setEnabled(false);
        categoryField = new javax.swing.JTextField();
        categoryField.setEditable(false);
        leadSingerField = new javax.swing.JTextField();
        leadSingerField.setEditable(false);
        titleField = new javax.swing.JTextField();
        titleField.setEditable(false);
        quantityField = new javax.swing.JTextField();
        quantityField.setEditable(false);
        displaySearch = new javax.swing.JScrollPane();
        // change font----------------------------------
        displaySearchField = new javax.swing.JTextPane();
        displaySearchField.setEditable(false);
        changeJTextPaneFont(displaySearchField);
        //-----------------------------------------------
        whatDoYouWant = new javax.swing.JLabel();
        buyUPC = new javax.swing.JTextField();
        buyUPC.setEditable(false);
        OK = new javax.swing.JButton();
        OK.setEnabled(false);
        viewCart = new javax.swing.JButton();
        viewCart.setEnabled(false);
        manager = new javax.swing.JPanel();
        addItem = new javax.swing.JRadioButton();
        processDelivery = new javax.swing.JRadioButton();
        dailySalesReport = new javax.swing.JRadioButton();
        topSellingItems = new javax.swing.JRadioButton();
        managerPanel = new javax.swing.JPanel();
        mngrItemUPC = new javax.swing.JLabel();
        mngrQuant = new javax.swing.JLabel();
        mngrPrice = new javax.swing.JLabel();
        addToInventory = new javax.swing.JButton();
        priceInput = new javax.swing.JTextField();
        itemUPCInput = new javax.swing.JTextField();
        quantityInput = new javax.swing.JTextField();
        processDeliPanel = new javax.swing.JPanel();
        processDay = new javax.swing.JLabel();
        procesMonth = new javax.swing.JLabel();
        processOrderID = new javax.swing.JLabel();
        orderID = new javax.swing.JTextField();
        processButton = new javax.swing.JButton();
        dsReportPanel = new javax.swing.JPanel();
        dsrDate = new javax.swing.JLabel();
        dsrDateField = new javax.swing.JTextField();
        dsrButton = new javax.swing.JButton();
        dsrTextPane = new javax.swing.JScrollPane();
        //---------------------------------------------
        jTextPane1 = new javax.swing.JTextPane();
		jTextPane1.setEditable(false);
		changeJTextPaneFont(jTextPane1);
		//---------------------------------------------
        tsiPanel = new javax.swing.JPanel();
        tsiDate = new javax.swing.JLabel();
        tsiTheTop = new javax.swing.JLabel();
        tsiTheTopSpinner = new javax.swing.JSpinner();
        tsiGoButton = new javax.swing.JButton();
        tsiDateField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        //---------------------------------------------
        jTextPane2 = new javax.swing.JTextPane();
        jTextPane2.setEditable(false);
        changeJTextPaneFont(jTextPane2);
        //---------------------------------------------
        monoFont = new Font("Andale Mono 14", Font.PLAIN, 2);
        

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroupClerk.add(processPurchase);
        processPurchase.setText("Process a Purchase");

        buttonGroupClerk.add(processReturn);
        processReturn.setText("Process a Return");
        processReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processReturnActionPerformed(evt);
            }
        });

        Purchase.setBorder(javax.swing.BorderFactory.createTitledBorder("Purchase"));
        Purchase.setName(""); // NOI18N

        itemInput.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Items:"));
        itemInput.setToolTipText("");

        addToCart.setText("Add To Cart");
        addToCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addToCartMouseClicked(evt);
            }
        });


        enterItemUPC.setToolTipText("Enter Item UPC");

        enterItemQuan.setToolTipText("Enter Quantity");

        itemUPC.setText("Item UPC:");

        jLabel2.setText("Quantity:");

        cancelOrder1.setText("Cancel Order");
        cancelOrder1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelOrder1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout itemInputLayout = new javax.swing.GroupLayout(itemInput);
        itemInput.setLayout(itemInputLayout);
        itemInputLayout.setHorizontalGroup(
            itemInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(itemUPC, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(itemInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemInputLayout.createSequentialGroup()
                        .addComponent(addToCart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        //.addComponent(deletePrevious)
                        .addGap(18, 18, 18)
                        .addComponent(cancelOrder1)
                        .addGap(27, 27, 27))
                    .addGroup(itemInputLayout.createSequentialGroup()
                        .addGroup(itemInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enterItemQuan, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(enterItemUPC, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        itemInputLayout.setVerticalGroup(
            itemInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, itemInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(itemInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterItemUPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemUPC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(itemInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterItemQuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(itemInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    //.addComponent(deletePrevious)
                    .addComponent(addToCart)
                    .addComponent(cancelOrder1))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Payment Method"));
        jPanel2.setToolTipText("Process Payment");

        paymentType.setText("Payment Type:");

        cashOrCard.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "Credit Card" }));
        cashOrCard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cashOrCardMouseClicked(evt);
            }
        });
        cashOrCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashOrCardActionPerformed(evt);
            }
        });

        fieldForCC.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        ccNumber.setText("Credit Card # :");

        expiryDate.setText("Expiry Date (MM/YY):");

        cancelOrder.setText("Cancel Order");
		cancelOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelOrderMouseClicked(evt);
            }
        });

        completePurchase.setText("Complete Purchase");
        completePurchase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                completePurchaseMouseClicked(evt);
            }
        });

        totalLabel.setText("Total:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paymentType)
                    .addComponent(totalLabel))
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cashOrCard, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(total))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ccNumber)
                            .addComponent(expiryDate)))
                    .addComponent(cancelOrder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldForCC)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(completePurchase)
                            .addComponent(fieldforExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentType)
                    .addComponent(cashOrCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldForCC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ccNumber))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldforExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(expiryDate)
                        .addComponent(totalLabel)
                        .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelOrder)
                    .addComponent(completePurchase))
                .addContainerGap())
        );

        javax.swing.GroupLayout PurchaseLayout = new javax.swing.GroupLayout(Purchase);
        Purchase.setLayout(PurchaseLayout);
        PurchaseLayout.setHorizontalGroup(
            PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PurchaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        PurchaseLayout.setVerticalGroup(
            PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PurchaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(itemInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        Return.setBorder(javax.swing.BorderFactory.createTitledBorder("Return"));

        enterReceiptID.setText("Enter Receipt ID:");

        issueRefund.setText("Issue Refund");
        issueRefund.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issueRefundMouseClicked(evt);
            }
        });

        checkReceipt.setText("Check Receipt");
        checkReceipt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkReceiptMouseClicked(evt);
            }
        });

        returnItemUPC.setText("Item UPC:");

        returnQuantity.setText("Quantity:");

        returnQuanField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnQuanFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReturnLayout = new javax.swing.GroupLayout(Return);
        Return.setLayout(ReturnLayout);
        ReturnLayout.setHorizontalGroup(
            ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReturnLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enterReceiptID)
                    .addComponent(returnItemUPC))
                .addGap(34, 34, 34)
                .addGroup(ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ReturnLayout.createSequentialGroup()
                        .addGroup(ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldForReceiptID, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnIUPCField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkReceipt)
                            .addComponent(returnQuantity))
                        .addGap(42, 42, 42)
                        .addGroup(ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isValid, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnQuanField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ReturnLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(issueRefund)
                        .addGap(85, 85, 85)
                        .addComponent(isSuccessRet, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ReturnLayout.setVerticalGroup(
            ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReturnLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterReceiptID)
                    .addComponent(fieldForReceiptID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkReceipt)
                    .addComponent(isValid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnItemUPC)
                    .addComponent(returnIUPCField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnQuantity)
                    .addComponent(returnQuanField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(ReturnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(issueRefund)
                    .addComponent(isSuccessRet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(97, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout clerkLayout = new javax.swing.GroupLayout(clerk);
        clerk.setLayout(clerkLayout);
        clerkLayout.setHorizontalGroup(
            clerkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clerkLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clerkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Return, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Purchase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(clerkLayout.createSequentialGroup()
                        .addGroup(clerkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(processReturn)
                            .addComponent(processPurchase))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        clerkLayout.setVerticalGroup(
            clerkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clerkLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processPurchase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Purchase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(processReturn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Return, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bigPane.addTab("Clerk", clerk);

        buttonGroupCustomer.add(registration);
        registration.setText("Registration");
        registration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                registrationMouseClicked(evt);
            }
        });
        
        buttonGroupCustomer.add(purchaseOnline);
        purchaseOnline.setText("Purchase Items Online");
        purchaseOnline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purchaseOnlineMouseClicked(evt);
            }
        });

        registrationPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        name.setText("Name:");

        address.setText("Address:");

        id.setText("ID:");

        phone.setText("Phone:");

        password.setText("Password:");

        createButton.setText("Create!");
        createButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout registrationPanelLayout = new javax.swing.GroupLayout(registrationPanel);
        registrationPanel.setLayout(registrationPanelLayout);
        registrationPanelLayout.setHorizontalGroup(
            registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registrationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(password)
                    .addComponent(id)
                    .addComponent(name))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cusPassword)
                    .addComponent(cusID)
                    .addComponent(cusName, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                .addGap(74, 74, 74)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createButton)
                    .addGroup(registrationPanelLayout.createSequentialGroup()
                        .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(address)
                            .addComponent(phone))
                        .addGap(59, 59, 59)
                        .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cusAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cusPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        registrationPanelLayout.setVerticalGroup(
            registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registrationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name)
                    .addComponent(address)
                    .addComponent(cusName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cusAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(87, 87, 87)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id)
                    .addComponent(phone)
                    .addComponent(cusID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cusPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(83, 83, 83)
                .addGroup(registrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password)
                    .addComponent(createButton)
                    .addComponent(cusPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        category.setText("Category:");

        leadSinger.setText("Lead Singer:");

        title.setText("Title:");

        quantity.setText("Quantity:");

        search.setText("Search");
		search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });

		buyUPC.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				buyUPCMouseClicked(evt);
			}
		});

        displaySearch.setViewportView(displaySearchField);

        whatDoYouWant.setText("I wish to buy item (UPC):");

        OK.setText("OK");
		OK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OKMouseClicked(evt);
            }
        });

        viewCart.setText("View Cart");
		viewCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewCartMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(displaySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(whatDoYouWant)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(buyUPC, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(OK)))
                                .addContainerGap())
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(viewCart)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(category)
                            .addComponent(title))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(categoryField)
                            .addComponent(titleField, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(leadSinger)
                            .addComponent(quantity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(leadSingerField, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(search)
                                .addGap(81, 81, 81))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(category)
                    .addComponent(leadSinger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(categoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leadSingerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(title)
                    .addComponent(quantity)
                    .addComponent(search)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(displaySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(24, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(whatDoYouWant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buyUPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OK))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewCart)
                        .addGap(76, 76, 76))))
        );

        javax.swing.GroupLayout customerLayout = new javax.swing.GroupLayout(customer);
        customer.setLayout(customerLayout);
        customerLayout.setHorizontalGroup(
            customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerLayout.createSequentialGroup()
                .addGroup(customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(registration)
                            .addComponent(purchaseOnline))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(customerLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(registrationPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        customerLayout.setVerticalGroup(
            customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registration)
                .addGap(29, 29, 29)
                .addComponent(registrationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(purchaseOnline)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bigPane.addTab("Customer", customer);

        buttonGroupManager.add(addItem);
        addItem.setText("Add items to store");

        buttonGroupManager.add(processDelivery);
        processDelivery.setText("Process Delivery");

        buttonGroupManager.add(dailySalesReport);
        dailySalesReport.setText("Daily Sales Report");

        buttonGroupManager.add(topSellingItems);
        topSellingItems.setText("Top Selling Items");

        managerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        mngrItemUPC.setText("Item UPC:");

        mngrQuant.setText("Quantity:");

        mngrPrice.setText("Price (Optional):");

        addToInventory.setText("Add to Inventory");
		addToInventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addToInventoryMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout managerPanelLayout = new javax.swing.GroupLayout(managerPanel);
        managerPanel.setLayout(managerPanelLayout);
        managerPanelLayout.setHorizontalGroup(
            managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mngrPrice)
                    .addComponent(mngrItemUPC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(priceInput, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(itemUPCInput))
                .addGap(50, 50, 50)
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addToInventory)
                    .addGroup(managerPanelLayout.createSequentialGroup()
                        .addComponent(mngrQuant)
                        .addGap(87, 87, 87)
                        .addComponent(quantityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        managerPanelLayout.setVerticalGroup(
            managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mngrItemUPC)
                    .addComponent(mngrQuant)
                    .addComponent(itemUPCInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(managerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mngrPrice)
                    .addComponent(addToInventory)
                    .addComponent(priceInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        processDeliPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        processDay.setText("Day (DD):");

        procesMonth.setText("Month (MM):");

        processOrderID.setText("Order ID:");

        processButton.setText("Process");
        processButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                processButtonMouseClicked(evt);
            }
        });
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //processButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout processDeliPanelLayout = new javax.swing.GroupLayout(processDeliPanel);
        processDeliPanel.setLayout(processDeliPanelLayout);
        processDeliPanelLayout.setHorizontalGroup(
            processDeliPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processDeliPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processOrderID)
                .addGap(47, 47, 47)
                .addComponent(orderID, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97)
                .addComponent(processButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        processDeliPanelLayout.setVerticalGroup(
            processDeliPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processDeliPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(processDeliPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(processOrderID)
                    .addComponent(processButton))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        dsReportPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dsrDate.setText("YYYY-MM-DD:");

        dsrButton.setText("Generate Report");
        dsrButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dsrButtonMouseClicked(evt);
            }
        });

        dsrTextPane.setViewportView(jTextPane1);

        javax.swing.GroupLayout dsReportPanelLayout = new javax.swing.GroupLayout(dsReportPanel);
        dsReportPanel.setLayout(dsReportPanelLayout);
        dsReportPanelLayout.setHorizontalGroup(
            dsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dsReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dsrTextPane)
                    .addGroup(dsReportPanelLayout.createSequentialGroup()
                        .addComponent(dsrDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dsrDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(dsrButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        dsReportPanelLayout.setVerticalGroup(
            dsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dsReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dsReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dsrDate)
                    .addComponent(dsrDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dsrButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dsrTextPane, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addContainerGap())
        );

        tsiPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tsiDate.setText("YYYY-MM-DD:");

        tsiTheTop.setText("The top");

        tsiGoButton.setText("Go!");
        tsiGoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tsiGoButtonMouseClicked(evt);
            }
        });

        tsiDateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tsiDateFieldActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPane2);

        javax.swing.GroupLayout tsiPanelLayout = new javax.swing.GroupLayout(tsiPanel);
        tsiPanel.setLayout(tsiPanelLayout);
        tsiPanelLayout.setHorizontalGroup(
            tsiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tsiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tsiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(tsiPanelLayout.createSequentialGroup()
                        .addComponent(tsiDate)
                        .addGap(109, 109, 109)
                        .addComponent(tsiDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(tsiTheTop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tsiTheTopSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(tsiGoButton)
                        .addGap(0, 163, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tsiPanelLayout.setVerticalGroup(
            tsiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tsiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tsiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tsiDate)
                    .addComponent(tsiTheTop)
                    .addComponent(tsiTheTopSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tsiGoButton)
                    .addComponent(tsiDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout managerLayout = new javax.swing.GroupLayout(manager);
        manager.setLayout(managerLayout);
        managerLayout.setHorizontalGroup(
            managerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerLayout.createSequentialGroup()
                .addGroup(managerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addItem)
                    .addComponent(dailySalesReport)
                    .addComponent(processDelivery)
                    .addComponent(topSellingItems)
                    .addGroup(managerLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(managerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(processDeliPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dsReportPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(managerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tsiPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 15, Short.MAX_VALUE))
        );
        managerLayout.setVerticalGroup(
            managerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(managerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                .addComponent(processDelivery)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processDeliPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dailySalesReport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dsReportPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(topSellingItems)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tsiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bigPane.addTab("Manager", manager);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bigPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bigPane, javax.swing.GroupLayout.PREFERRED_SIZE, 838, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: //
    // :::::::! HERE BEGINS THE CODE FOR THE CLERK TAB !:::::::::: //
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: //


    //total price that will be displayed
    double dollars = 0.0;

    private void addToCartMouseClicked(java.awt.event.MouseEvent evt) {

        // -- {{ What happens when you press the "ADD TO CART" button }} --

    	String preiid, prequantity;
        int iid = 0;
        int quantity = 0;

        preiid = enterItemUPC.getText();
        prequantity = enterItemQuan.getText();

        // Checks to see if one of the Item UPC or Quantity fields are blank
        if (preiid.length() == 0 || prequantity.length() == 0) {
        	// Error message
    		JOptionPane.showMessageDialog(null, "Both Item UPC and Quantity fields must be filled.",
    				"Inane error",
    				JOptionPane.ERROR_MESSAGE);
    		isValid.setText("Invalid");

    		//All is well
        } else {

        	//grabs item_upc and item_quantity from the text field that the user enters.
        	try {
        		iid = Integer.parseInt(enterItemUPC.getText());
        		quantity = Integer.parseInt(enterItemQuan.getText());
        	} catch (NumberFormatException e) {
        		displayMessage("Get it together, that's not a number.");
        		enterItemUPC.setText("");
        		enterItemQuan.setText("");
        		return;
        	}

        }
        
        try {
            if (newPurchase) {
                trans.insertNewPurchase();
                newPurchase = false;
            }
            if (trans.addToCart(iid, quantity)) {
            	Statement stmt = con.createStatement();
            	ResultSet rs = stmt.executeQuery("SELECT item_price FROM Item WHERE item_upc = " + iid);
            	if (rs.next()) {
            		dollars += quantity * rs.getDouble("item_price");
                	total.setText(String.valueOf(dollars));
                	System.out.println("DOLLARS:" + dollars);
            	}
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            
            e.printStackTrace();
        } 

    }


    private void cancelOrder1MouseClicked(java.awt.event.MouseEvent evt) {
        // -- {{ What happens when the first cancel order is clicked? }} --
    	// It should clear out all the text fields.

    	String nothing;
    	nothing = "";
    	enterItemUPC.setText(String.valueOf(nothing));
    	enterItemQuan.setText(String.valueOf(nothing));
    	total.setText(String.valueOf(nothing));
    	fieldForCC.setText(String.valueOf(nothing));
    	fieldforExpiryDate.setText(String.valueOf(nothing));

    	//very important to reset the total amount when the previous order has been cancelled.
    	dollars = 0.0;
    	total.setText("");
    	enterItemUPC.setText("");
    	enterItemQuan.setText("");
    	total.setText("");
    	fieldForCC.setText("");
    	fieldforExpiryDate.setText("");
    	
    	try {
            newPurchase = true;
            trans.cancelCart();
        } catch (SQLException e) {
            
            e.printStackTrace();
        }
    }

    private void cancelOrderMouseClicked(java.awt.event.MouseEvent evt) {
        // -- {{ What happens when the first cancel order is clicked? }} --
    	// It should clear out all the text fields.

    	String nothing;
    	nothing = "";
    	enterItemUPC.setText(String.valueOf(nothing));
    	enterItemQuan.setText(String.valueOf(nothing));
    	total.setText(String.valueOf(nothing));
    	fieldForCC.setText(String.valueOf(nothing));
    	fieldforExpiryDate.setText(String.valueOf(nothing));

    	//very important to reset the total amount when the previous order has been cancelled.
    	dollars = 0.0;
    	
    	try {
            newPurchase = true;
            trans.cancelCart();
        } catch (SQLException e) {
            
            e.printStackTrace();
        }
    }

    private void cashOrCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashOrCardActionPerformed
        
    }//GEN-LAST:event_cashOrCardActionPerformed

    private void cashOrCardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashOrCardMouseClicked
        
    }//GEN-LAST:event_cashOrCardMouseClicked

    private void processReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processReturnActionPerformed
        
    }//GEN-LAST:event_processReturnActionPerformed

	private void registrationMouseClicked(MouseEvent evt) {
      
        createButton.setEnabled(true);
        cusID.setEditable(true);
        cusName.setEditable(true);
        cusAddress.setEditable(true);
        cusPhone.setEditable(true);
        cusPassword.setEditable(true);
        
		categoryField.setEditable(false);
      	leadSingerField.setEditable(false);
      	titleField.setEditable(false);
      	quantityField.setEditable(false);
      	search.setEnabled(false);
      	buyUPC.setEditable(false);
      	OK.setEnabled(false);
      	viewCart.setEnabled(false);
		
	}
	
	int rid;
    private void purchaseOnlineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseOnlineMouseClicked

        //make a pop up when Purchase Online is Clicked
        createButton.setEnabled(false);
        cusID.setEditable(false);
        cusName.setEditable(false);
        cusAddress.setEditable(false);
        cusPhone.setEditable(false);
        cusPassword.setEditable(false);
    	
    	String customerID;
    	int iD;
    	String customerPassword;
    	int cancel;

    	// While customer ID's length is 0, keep prompting user to enter customer ID.
    
    	customerID = JOptionPane.showInputDialog("Please Enter Your Customer ID: ");
    	try {
    		iD = Integer.parseInt(customerID);
    	} catch (NumberFormatException e) {
    		buttonGroupCustomer.clearSelection();
    		return;
    	}
    	
    	try {
			while (!trans.checkCustomerID(customerID)) {
				customerID = JOptionPane.showInputDialog("Please Enter a VALID Customer ID: ");
		    	try {
		    		iD = Integer.parseInt(customerID);
		    	} catch (NumberFormatException e) {
		    		buttonGroupCustomer.clearSelection();
		    		return;
		    	}
			}


			JPasswordField passwordField = new JPasswordField();
			// * is what you will see when user enters password.
			passwordField.setEchoChar('*');

			Object[] obj = {"Please enter the password:\n", passwordField};
			Object[] obj2 = {"Wrong Password. Try Again: ", passwordField};
			Object stringArray[] = {"OK","Cancel"};
			cancel = JOptionPane.showOptionDialog(null, obj, "Need password", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, stringArray, obj);
			
			if(cancel==1) {
				// set radio button to not selected
				return;
			}
			
			customerPassword = new String(passwordField.getPassword());
			while (!trans.checkCustomerPassword(customerID, customerPassword)) {		
				passwordField.setText("");
				cancel = JOptionPane.showOptionDialog(null, obj2, "Try Again", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, stringArray, obj);
				if(cancel==1) {
					// set radio button to not selected
					return;
				}
				customerPassword = new String(passwordField.getPassword());
				passwordField.setText("");
			}
			if (customerPassword.isEmpty()) {
				// set radio button to not selected
				return;
			}		
			
	      	categoryField.setEditable(true);
	      	leadSingerField.setEditable(true);
	      	titleField.setEditable(true);
	      	quantityField.setEditable(true);
	      	search.setEnabled(true);  
	      	
			rid = trans.insertPurchase(Integer.parseInt(customerID));

    	} catch (HeadlessException e) {
    		
    		e.printStackTrace();
    	} catch (SQLException e) {
    		
    		e.printStackTrace();
		}    	


    }//GEN-LAST:event_purchaseOnlineMouseClicked

    private void tsiDateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tsiDateFieldActionPerformed
        
    }//GEN-LAST:event_tsiDateFieldActionPerformed

    private void checkReceiptMouseClicked(java.awt.event.MouseEvent evt) {
        // -- {{ What happens when "Check Receipt" button is pressed }} --

    	int rid;
    	String prerid;
    	prerid = fieldForReceiptID.getText();

    	//checks to see if ReceiptID field is left empty.
    	if(prerid.length() == 0) {

    		JOptionPane.showMessageDialog(null, "Receipt field cannot be blank.",
    				"Inane error",
    				JOptionPane.ERROR_MESSAGE);
    		isValid.setText("Invalid");
    	} else {
    		//Not empty! Yay the clerk isn't retarded.
    		// rid is receipt ID, now we need a SQL statement to verify that the RID exists in the statement.
    		rid = Integer.parseInt(fieldForReceiptID.getText());

    		try {
    			boolean b = trans.checkReceipt(rid);
    			if (b) {
    				isValid.setText("Valid");
    			}
    			else {
    				isValid.setText("Not Valid");
    			}
    		} catch (SQLException e) {
    			
    			e.printStackTrace();
    		} catch (IOException e) {
    			
    			e.printStackTrace();
    		} catch (ParseException e) {
    			
    			e.printStackTrace();
    		}

    	// For testing purposes:
    	System.out.println("Your receipt is " + rid + ".");
    	}
    }

    private void issueRefundMouseClicked(java.awt.event.MouseEvent evt) {
        // -- {{ What happens when the "Issue Refund" button is clicked }} --

    	String preiid, prequantity;
    	int iid = 0, quantity = 0;

    	preiid = returnIUPCField.getText();
    	prequantity = returnQuanField.getText();

    	if (preiid.length() == 0 || prequantity.length() == 0) {
    		JOptionPane.showMessageDialog(null, " The Item UPC and Quantity fields cannot be blank.",
    				"Inane error",
    				JOptionPane.ERROR_MESSAGE);
    		isSuccessRet.setText("Invalid");

    	} else {
    		// All the fields are filled in
    	iid = Integer.parseInt(returnIUPCField.getText());
    	quantity = Integer.parseInt(returnQuanField.getText());

    	// For debugging purposes
    	System.out.println("You have returned: " + quantity + " of item upc: " + iid);
    	isSuccessRet.setText("Valid");
    	}

    	try {
            trans.inStoreRefund(iid, quantity);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    private void completePurchaseMouseClicked(java.awt.event.MouseEvent evt) {
        // -- {{ What happens when the "Complete Purchase" button is pressed }} --
        String boxValue;
        String preCC, preExpDate;
        int CC = 0;
        String ExpDate;
        boxValue = cashOrCard.getSelectedItem().toString();

        preCC = fieldForCC.getText();
        preExpDate = fieldforExpiryDate.getText();
        
        if (boxValue == "Cash") {
            // paying by Cash, but, is the clerk dumb enough to fill in CC fields?
            if ( preCC.length() != 0 || preExpDate.length() != 0 ) {
                JOptionPane.showMessageDialog(null, "You are paying by cash.  Leave the credit card fields blank.",
                        "Inane error",
                        JOptionPane.ERROR_MESSAGE);
                isSuccessRet.setText("Invalid");

            } else {
                // those fields are empty, now let's check to see if there is shit in the cart.

                // The grand total's field is empty, there is nothing, throw error.
                if (total.getText().length() == 0) {
                    JOptionPane.showMessageDialog(null, "Seems to be no items in cart.",
                            "Inane error",
                            JOptionPane.ERROR_MESSAGE);
                    isSuccessRet.setText("Invalid");
                } else {
                    //There is a grand total AND the credit card fields are NOT filled out.
                    //do stuff
                    
                    try {
                        newPurchase = true;
                        trans.updateAddItemStock();
                    } catch (SQLException e) {
                        
                        e.printStackTrace();
                    }                   
                    
                    JOptionPane.showMessageDialog(null, "Thank you for your purchase by cash.");
                }
            }


        } else {
            //paying by CC then, did the clerk/jerk fill everything out?
            if( preCC.length() == 0 || preExpDate.length() == 0) {
                JOptionPane.showMessageDialog(null, " You are paying by credit card.  Please fill in credit card info.",
                        "Inane error",
                        JOptionPane.ERROR_MESSAGE);
                isSuccessRet.setText("Invalid");

            } else {
                // The grand total's field is empty, there is nothing, throw error.
                if (total.getText().length() == 0) {
                    JOptionPane.showMessageDialog(null, "Seems to be no items in cart.",
                            "Inane error",
                            JOptionPane.ERROR_MESSAGE);
                    isSuccessRet.setText("Invalid");
                } else {
                    //There is a grand total AND the credit card fields are filled out.


                    //do stuff
        
                    


                    //Sets the credit card number to CC (an INT) and expiry date to ExpDate (an INT)
                    CC = Integer.parseInt(fieldForCC.getText());
                    //ExpDate = Integer.parseInt(fieldforExpiryDate.getText());
                    ExpDate = fieldforExpiryDate.getText();

                    try {
                        trans.creditCardOrCash(CC, ExpDate);
                    } catch (SQLException e) {
                        
                        e.printStackTrace();
                    } catch (IOException e) {
                        
                        e.printStackTrace();
                    }
                    
                    JOptionPane.showMessageDialog(null, "Thank you for your purchase by credit card.  Now we can commit credit card fraud.");

                    //For Testing Purposes:
                    System.out.println("Your CC #: " + CC + " and expiry date is: " + ExpDate);

                    

                }
            }
        }

        dollars = 0.0;
    	total.setText("");
    	enterItemUPC.setText("");
    	enterItemQuan.setText("");
    	total.setText("");
    	fieldForCC.setText("");
    	fieldforExpiryDate.setText("");
        // For debugging purposes
        System.out.println(boxValue);
    }




    private void returnQuanFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnQuanFieldActionPerformed
        // TOdd your handling code here:
    }//GEN-LAST:event_returnQuanFieldActionPerformed


    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: //
    // :::::::! HERE BEGINS THE CODE FOR THE CUSTOMER TAB !::::::: //
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: //

    private void createButtonMouseClicked(java.awt.event.MouseEvent evt) {
        // -- {{ What happens when the "Create Button" is pressed? }} --

    	String preName, preAddress, preID, prePhone, prePassword;
    	String name, address, password;
    	int id, phone;

    	preName = cusName.getText();
    	preAddress = cusAddress.getText();
    	preID = cusID.getText();
    	prePhone = cusPhone.getText();
    	prePassword = cusPassword.getText();


    	// For name, aside from checking to see if the user inputted anything, I feel that we need to make sure in the SQL database,
    	// that it has not been taken.  We shall expand this if statement a bit more.
    	if (preName.length() == 0) {
			JOptionPane.showMessageDialog(null, "Name cannot be blank.",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
			isSuccessRet.setText("Invalid");
    	}
    	if (preAddress.length() == 0) {
			JOptionPane.showMessageDialog(null, "Address cannot be blank.",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
			isSuccessRet.setText("Invalid");
    	}
    	if (preID.length() == 0) {
			JOptionPane.showMessageDialog(null, "ID cannot be blank.",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
			isSuccessRet.setText("Invalid");
    	}
    	if (prePhone.length() == 0) {
			JOptionPane.showMessageDialog(null, "Phone cannot be blank.",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
			isSuccessRet.setText("Invalid");
    	}
    	if (prePassword.length() == 0) {
			JOptionPane.showMessageDialog(null, "Password cannot be blank.",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
			isSuccessRet.setText("Invalid");

    	}

    	String idChecker=cusID.getText();
    	boolean incorrect = true;
    	while(incorrect){
    		try{Integer.parseInt(idChecker);incorrect = false;}
    		catch(NumberFormatException nfe){
    			idChecker=JOptionPane.showInputDialog("Invalid ID input. Please "+
    					"enter your ID as numbers: ");
    		}

    	}

    	// All fields are good to go:
    	name = preName;
    	address = preAddress;
    	id = Integer.parseInt(preID);
    	phone = Integer.parseInt(prePhone);
    	password = prePassword;
    	
    	try {
			if(trans.registerCustomer(id, name, password, address, phone)) {				
				cusAddress.setText("");
				cusName.setText("");
				cusPassword.setText("");
				cusPhone.setText("");
			}
			cusID.setText("");
		} catch (SQLException e) {
		
			e.printStackTrace();
		}

    	
    }



    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: //
    // :::::::! HERE BEGINS THE CODE FOR THE MANAGER TAB !:::::::: //
    // ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: //

	private void addToInventoryMouseClicked(java.awt.event.MouseEvent evt) {
        // -- {{ What happens when "Add To Inventory" button is clicked }} --

		String preIid, preQuantity, prePrice;
		int iid, quantity;
		double price;

		preIid = itemUPCInput.getText();
		preQuantity = quantityInput.getText();
		prePrice = priceInput.getText();

		// price and quantity cannot be empty
		if (preQuantity.length() == 0 || preIid.length() == 0) {
			/*
			 * throw an error.
			 */
			JOptionPane.showMessageDialog(null, "Quantity or Item UPC cannot be blank.",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
			isSuccessRet.setText("Invalid");

		} else {
			/*
			 * check to see if price field is empty or not,
			 */
			iid = Integer.parseInt(preIid);
			quantity = Integer.parseInt(preQuantity);

			if (prePrice.length() == 0) {
				System.out.println("You have entered: " + quantity + " of item: " + iid);
				try {
					trans.addItems(iid, quantity);
				} catch (IOException e) {
					
					e.printStackTrace();
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			} else {
				/*
				 * price field has price in it
				 */
				price = Double.parseDouble(prePrice);
				System.out.println("You have entered: " + quantity + " of item: " + iid + " with price: " + price);
				try {
					trans.addItems(iid, quantity, price);
				} catch (IOException e) {
					
					e.printStackTrace();
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			}
		}
		itemUPCInput.setText("");
		quantityInput.setText("");
		priceInput.setText("");
    }

    private void processButtonMouseClicked(java.awt.event.MouseEvent evt) {
        // -- {{ What happens when "Process" button is clicked }} --

    	String preOrderID;
		int processDeliOrderID;

		preOrderID = orderID.getText();

		if (preOrderID.length() == 0) {
			JOptionPane.showMessageDialog(null, "Please fill in id.",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
			isSuccessRet.setText("Invalid");
		} else {
			processDeliOrderID = Integer.parseInt(preOrderID);
			try {
				trans.processDelivery(processDeliOrderID);
			} catch (NumberFormatException e) {

				e.printStackTrace();
			} catch (IOException e) {
				
				e.printStackTrace();
			} catch (SQLException e) {

				e.printStackTrace();
			}
		}
		orderID.setText("");

    }


	private void dsrButtonMouseClicked(java.awt.event.MouseEvent evt) {
		// -- {{ What happens when "Generate Report" button
		// is pressed }} --
		String date;
		date = dsrDateField.getText();
		String report = "";

		if (date.length() == 0) {
			/*
			 * throw error
			 */
			JOptionPane.showMessageDialog(null, "The date field cannot be blank",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
			isSuccessRet.setText("Invalid");
		}
		
		try {
			report = trans.dailyReport(date);
		} catch (ParseException e) {
		
			e.printStackTrace();
		} catch (IOException e) {
			
			e.printStackTrace();
		} catch (SQLException e) {
			
			e.printStackTrace();
		}

		jTextPane1.setText(report);



	}

    private void tsiGoButtonMouseClicked(java.awt.event.MouseEvent evt) {
        // -- {{ What happens when you click the "Go!" button }} --

    	String date;
    	date = tsiDateField.getText();
    	int top;  // top is the "top n" sellers.
    	String report = "";

    	// grabs value from spinner-box
    	top = (Integer)tsiTheTopSpinner.getValue();

    	if (date.length() == 0) {
    		/*
    		 * throw error
    		 */
			JOptionPane.showMessageDialog(null, "The date field cannot be blank",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
			isSuccessRet.setText("Invalid");
    	}
    	// i will need to check to make sure the date format is followed.

    	try {
			report = trans.topSellingItems(top, date);
		} catch (IOException e) {
			
			e.printStackTrace();
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
    	// for testing purposes:  makes sure that I can get the value from the spinner-box and the text displays correctly.
    	jTextPane2.setText(report);

    }

	//boolean setClickable = false;
	int theQuantity;
	
	private void searchMouseClicked(java.awt.event.MouseEvent evt) {
		// -- {{ What happens when the "Search" button is
		// clicked -- }}
		
		String preCategory, preLeadSinger, preTitle, preQuantity;
		int quantity = 0;
		String category, leadSinger, title;

		preCategory = categoryField.getText();
		preLeadSinger = leadSingerField.getText();
		preTitle = titleField.getText();
		preQuantity = quantityField.getText();
		
		if (!preQuantity.isEmpty()) {
			try {
				quantity = Integer.parseInt(preQuantity);
			} catch (NumberFormatException e) {
				displayMessage("Please input valid number.");
				return;
			}
		} else {
			displayMessage("You need to select quantity.");
			return;			
		}

		if (preQuantity.length() == 0 || quantity == 0) {
			/*
			 * quantity field is empty, throw error
			 */
			JOptionPane.showMessageDialog(null, "The quantity field cannot be blank or zero",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
		} else {
			category = preCategory;
			leadSinger = preLeadSinger;
			title = preTitle;
			
			try {
				displaySearchField.setText(trans.getItemList(category, title, leadSinger));
			} catch (SQLException e) {
				
				e.printStackTrace();
			}

	      	buyUPC.setEditable(true);
	      	OK.setEnabled(true);
			theQuantity = quantity;
		}
	}

	private void buyUPCMouseClicked(java.awt.event.MouseEvent evt) {
		// -- {{ What happens when you clicked the text
		// field for "I wish to buy item" }} --
		//
//		if (setClickable == false) {
//			JOptionPane.showMessageDialog(null, "You need to search for an item first",
//					"Inane error",
//					JOptionPane.ERROR_MESSAGE);
//			//makes text field lose focus so we cannot forcefully enter UPC without searching
//			buyUPC.setFocusable(false);
//		}
		
		
    }
	
	//these need to be global because other functions utilize it.
	int toBeBought;
	String preUPC;
	
	private void OKMouseClicked(java.awt.event.MouseEvent evt) {
		// -- {{ What happens when the "OK" button is
		// clicked }} --
		int UPC;

		preUPC = buyUPC.getText();

		// checks to see if it is empty or not
		if (preUPC.length() == 0) {
			JOptionPane.showMessageDialog(null, "You need to enter an item's UPC code first",
					"Inane error",
					JOptionPane.ERROR_MESSAGE);
		} 
		else {
			UPC = Integer.parseInt(preUPC);
			// the field isn't empty, now to deal with the
			// quantity.
			
			try {
				trans.addToCart(UPC, theQuantity, rid);
			} catch (SQLException e) {
				
				e.printStackTrace();
			}
		}
				viewCart.setEnabled(true);
				//clear all the fields
				String nothing = "";
				buyUPC.setText(nothing);
				quantityField.setText(nothing);
				titleField.setText(nothing);
				leadSingerField.setText(nothing);
				categoryField.setText(nothing);
			
		
	}
	
	
    private void viewCartMouseClicked(java.awt.event.MouseEvent evt) {                                      
        // -- {{ What happens when "View Cart" is pressed }} --
    	
    	try {
			displaySearchField.setText(trans.viewCart(rid));
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
    	
    		JFrame frame = new JFrame();
//
    		Object stringArray[] = { "Proceed With Checkout", "Continue Shopping" };
    		int n = JOptionPane.showOptionDialog(frame, "Would you like to...", "Select an Option",
    				JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, stringArray,
    				stringArray[0]);

    		 //if n = 0, it means the user selected, "Proceed With Checkout"
    		if( n == 0 ) {

    			int creditno = Integer.parseInt(JOptionPane.showInputDialog("Credit Card Number:"));
    			String expiry = JOptionPane.showInputDialog("Expiry Date:");
    			
    			try {
					trans.finalizePurchase(creditno, expiry, rid);
					trans.updateStoreStock(rid);
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
    	      	categoryField.setEditable(false);
    	      	leadSingerField.setEditable(false);
    	      	titleField.setEditable(false);
    	      	quantityField.setEditable(false);
    	      	search.setEnabled(false);
    	      	buyUPC.setEditable(false);
    	      	OK.setEnabled(false);
    	      	viewCart.setEnabled(false);
    	      	displaySearchField.setText("");
    	      	buttonGroupCustomer.clearSelection();
    			
    		}
   	  
    }
	

    public void displayMessage(String msg) {
    	JOptionPane.showMessageDialog(null, msg, "Message", JOptionPane.INFORMATION_MESSAGE);
    }
    
    public boolean displayQuestion(String msg) {
    	int chosen = JOptionPane.showConfirmDialog(null, msg, "Choose", JOptionPane.YES_NO_OPTION);
    	if (chosen == 0) {
    		return true;
    	}
    	return false;
    }
    
    private void changeJTextPaneFont(javax.swing.JTextPane textPane){
        MutableAttributeSet textAttr = textPane.getInputAttributes();
        StyleConstants.setFontFamily(textAttr, "Andale Mono 8");
        StyleConstants.setFontSize(textAttr, 10);
        StyleConstants.setForeground(textAttr, Color.blue);
        StyledDocument doc = textPane.getStyledDocument();
        doc.setCharacterAttributes(0, doc.getLength() + 1, textAttr, false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OK;
    private javax.swing.JPanel Purchase;
    private javax.swing.JPanel Return;
    private javax.swing.JRadioButton addItem;
    private javax.swing.JButton addToCart;
    private javax.swing.JButton addToInventory;
    private javax.swing.JLabel address;
    private javax.swing.JTabbedPane bigPane;
    private javax.swing.ButtonGroup buttonGroupClerk;
    private javax.swing.ButtonGroup buttonGroupCustomer;
    private javax.swing.ButtonGroup buttonGroupManager;
    private javax.swing.JTextField buyUPC;
    private javax.swing.JButton cancelOrder;
    private javax.swing.JButton cancelOrder1;
    private javax.swing.JComboBox cashOrCard;
    private javax.swing.JLabel category;
    private javax.swing.JTextField categoryField;
    private javax.swing.JLabel ccNumber;
    private javax.swing.JButton checkReceipt;
    private javax.swing.JPanel clerk;
    private javax.swing.JButton completePurchase;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField cusAddress;
    private javax.swing.JTextField cusID;
    private javax.swing.JTextField cusName;
    private javax.swing.JTextField cusPassword;
    private javax.swing.JTextField cusPhone;
    private javax.swing.JPanel customer;
    private javax.swing.JRadioButton dailySalesReport;
   // private javax.swing.JButton deletePrevious;
    private javax.swing.JScrollPane displaySearch;
    private javax.swing.JTextPane displaySearchField;
    private javax.swing.JPanel dsReportPanel;
    private javax.swing.JButton dsrButton;
    private javax.swing.JLabel dsrDate;
    private javax.swing.JTextField dsrDateField;
    private javax.swing.JScrollPane dsrTextPane;
    private javax.swing.JTextField enterItemQuan;
    private javax.swing.JTextField enterItemUPC;
    private javax.swing.JLabel enterReceiptID;
    private javax.swing.JLabel expiryDate;
    private javax.swing.JTextField fieldForCC;
    private javax.swing.JTextField fieldForReceiptID;
    private javax.swing.JTextField fieldforExpiryDate;
    private javax.swing.JLabel id;
    private javax.swing.JTextField isSuccessRet;
    private javax.swing.JTextField isValid;
    private javax.swing.JButton issueRefund;
    private javax.swing.JPanel itemInput;
    private javax.swing.JLabel itemUPC;
    private javax.swing.JTextField itemUPCInput;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JLabel leadSinger;
    private javax.swing.JTextField leadSingerField;
    private javax.swing.JPanel manager;
    private javax.swing.JPanel managerPanel;
    private javax.swing.JLabel mngrItemUPC;
    private javax.swing.JLabel mngrPrice;
    private javax.swing.JLabel mngrQuant;
    private javax.swing.JLabel name;
    private javax.swing.JTextField orderID;
    private javax.swing.JLabel password;
    private javax.swing.JLabel paymentType;
    private javax.swing.JLabel phone;
    private javax.swing.JTextField priceInput;
    private javax.swing.JLabel procesMonth;
    private javax.swing.JButton processButton;
    private javax.swing.JLabel processDay;
    private javax.swing.JPanel processDeliPanel;
    private javax.swing.JRadioButton processDelivery;
    private javax.swing.JLabel processOrderID;
    private javax.swing.JRadioButton processPurchase;
    private javax.swing.JRadioButton processReturn;
    private javax.swing.JRadioButton purchaseOnline;
    private javax.swing.JLabel quantity;
    private javax.swing.JTextField quantityField;
    private javax.swing.JTextField quantityInput;
    private javax.swing.JRadioButton registration;
    private javax.swing.JPanel registrationPanel;
    private javax.swing.JTextField returnIUPCField;
    private javax.swing.JLabel returnItemUPC;
    private javax.swing.JTextField returnQuanField;
    private javax.swing.JLabel returnQuantity;
    private javax.swing.JButton search;
    private javax.swing.JLabel title;
    private javax.swing.JTextField titleField;
    private javax.swing.JRadioButton topSellingItems;
    private javax.swing.JTextField total;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JLabel tsiDate;
    private javax.swing.JTextField tsiDateField;
    private javax.swing.JButton tsiGoButton;
    private javax.swing.JPanel tsiPanel;
    private javax.swing.JLabel tsiTheTop;
    private javax.swing.JSpinner tsiTheTopSpinner;
    private javax.swing.JButton viewCart;
    private javax.swing.JLabel whatDoYouWant;
    private Font monoFont;
    // End of variables declaration//GEN-END:variables
} 